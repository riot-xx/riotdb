Starting Execution!
Connected to DB
Integer Table:	1	VectorTable1
Printing All Integer: VectorTable1 (ID: 1)
	1	2128
	2	123
	3	3211
	4	67
	5	724
	6	27
	7	9
From integer table got elem 10: NA
	Loaded into Integers table
Printing All Integer: VectorTable1 (ID: 1)
	1	2128
	2	123
	3	3211
	4	67
	5	724
	6	27
	7	9
	8	234
	9	3454
	10	-7546
	11	32
	12	43
	13	435
	14	-6434
	15	0
	16	7676
	17	-5
	18	9
	19	-566
	20	45
	21	6
	22	2
Getting Range of Integers (5,9):
	5	724
	6	27
	7	9
	8	234
	9	3454
Getting Sparse Integers
	3	3211
	30	NA
	12	43
	6	27
Getting Integers with indexes from VectorTable2
Printing All Integer: VectorTable2 (ID: 2)
	1	3
	2	30
	3	12
	4	6
	5	3
Printing All Integer: VectorView3 (ID: 3)
	1	3211
	2	NA
	3	43
	4	27
	5	3211
Getting Integers with indexes from VectorTable4
Printing Double Vector: VectorTable4 (ID: 4)
	1	3.200000
	2	33.623000
	3	17.230000
	4	5.750000
	5	2.900000
Printing All Integer: VectorView5 (ID: 5)
	1	3211
	2	NA
	3	-5
	4	724
	5	123
In integer table set elem 15: 150
Getting Int elems using logic vector VectorTable8 (1,0,0,1,1)
Printing All Integer: VectorView10 (ID: 10)
	1	2128
	2	67
	3	724
	4	27
	5	3454
	6	-7546
	7	32
	8	-6434
	9	150
	10	7676
	11	-566
	12	45
	13	6
----------------------------------------
Double Table:	11	VectorTable11
Printing Double Vector: VectorTable11 (ID: 11)
	1	4234.123324
	2	432.789000
From double table got elem 4: NA
	Loaded into Doubles table
Printing Double Vector: VectorTable11 (ID: 11)
	1	4234.123324
	2	432.789000
	3	321.345000
	4	0.234556
	5	-123.568000
	6	234.000000
	7	0.000000
	8	435.000010
	9	234.645779
	10	-0.000120
	11	34.524530
	12	2353.540000
	13	22.340000
Getting Range of Doubles: (4,7):
	4	0.234556
	5	-123.568000
	6	234.000000
	7	0.000000
Getting Sparse Doubles
	2	432.789000
	3	321.345000
	5	-123.568000
	1	4234.123324
Getting Doubles with indexes from VectorTable12
Printing All Integer: VectorTable12 (ID: 12)
	1	3
	2	30
	3	12
	4	2
	5	3
Printing Double Vector: VectorView13 (ID: 13)
	1	321.345000
	2	NA
	3	2353.540000
	4	432.789000
	5	321.345000
Getting Doubles with indexes from VectorTable14
Printing Double Vector: VectorTable14 (ID: 14)
	1	3.200000
	2	33.623000
	3	17.230000
	4	1.750000
	5	2.900000
Printing Double Vector: VectorView15 (ID: 15)
	1	321.345000
	2	NA
	3	NA
	4	4234.123324
	5	432.789000
Getting Double elems using logic vector VectorTable16 (1,0,0,1,1)
Printing Double Vector: VectorView18 (ID: 18)
	1	4234.123324
	2	0.234556
	3	-123.568000
	4	234.000000
	5	234.645779
	6	-0.000120
	7	34.524530
----------------------------------------
String Table:	19	VectorTable19
Printing String Vector: VectorTable19 (ID: 19)
	1	Hello's @#$ yp<int>?
	2	world{},[] "done.
	3	yes`!
From string table got elem 5: NA
	Loaded into Strings table
Printing String Vector: VectorTable19 (ID: 19)
	1	Hello's @#$ yp<int>?
	2	world{},[] "done.
	3	yes`!
	4	George Mason
	5	Yes, hello!
	6	Maybe!@#
	7	Yeap123
	8	no no  , yes yes?
	9	{}[]()
	10	Symbols: !@#$%^&*
Getting Range of Strings: (3,6):
	3	yes`!
	4	George Mason
	5	Yes, hello!
	6	Maybe!@#
Getting Sparse Strings
	1	Hello's @#$ yp<int>?
	4	George Mason
	3	yes`!
Getting Strings with indexes from VectorTable20
Printing All Integer: VectorTable20 (ID: 20)
	1	3
	2	30
	3	12
	4	6
	5	3
Printing String Vector: VectorView21 (ID: 21)
	1	yes`!
	2	NA
	3	NA
	4	Maybe!@#
	5	yes`!
Getting Strings with indexes from VectorTable22
Printing Double Vector: VectorTable22 (ID: 22)
	1	3.200000
	2	33.623000
	3	17.230000
	4	5.750000
	5	2.900000
Printing String Vector: VectorView23 (ID: 23)
	1	yes`!
	2	NA
	3	NA
	4	Yes, hello!
	5	world{},[] "done.
Getting String elems using logic vector VectorTable24 (1,0,0,1,1)
Printing String Vector: VectorView26 (ID: 26)
	1	Hello's @#$ yp<int>?
	2	George Mason
	3	Yes, hello!
	4	Maybe!@#
	5	{}[]()
	6	Symbols: !@#$%^&*
----------------------------------------
Complex Table:	27	VectorTable27
Printing Complex Vector: VectorTable27 (ID: 27)
	1	123.430000	-12.435000
	2	645.346000	0.000000
	3	76.123450	321.234000
	4	123.430000	12.000000
	5	645.346000	-12.435000
	6	76.123450	0.000000
	7	123.430000	321.234000
From complex table got elem 5: 645.346000, -12.435000
	Loaded into Complex table
Printing Complex Vector: VectorTable27 (ID: 27)
	1	123.430000	-12.435000
	2	645.346000	0.000000
	3	76.123450	321.234000
	4	123.430000	12.000000
	5	645.346000	-12.435000
	6	76.123450	0.000000
	7	123.430000	321.234000
	8	23.123000	12.423400
	9	0.231400	4.000023
	10	-23.976000	95.000000
	11	13.754000	-3.567800
	12	-43.088000	-0.000100
	13	23.000000	34.312400
	14	0.000000	24.000000
	15	25.440000	4.560000
Getting Range of Complex: (6,9):
	6	76.123450	0.000000
	7	123.430000	321.234000
	8	23.123000	12.423400
	9	0.231400	4.000023
Getting Sparse Complex
	3	76.123450	321.234000
	9	0.231400	4.000023
	5	645.346000	-12.435000
Getting Complex with indexes from VectorTable28
Printing All Integer: VectorTable28 (ID: 28)
	1	3
	2	30
	3	12
	4	6
	5	3
Printing Complex Vector: VectorView29 (ID: 29)
	1	76.123450	321.234000
	2	NA	NA
	3	-43.088000	-0.000100
	4	76.123450	0.000000
	5	76.123450	321.234000
Getting Complex with indexes from VectorTable30
Printing Double Vector: VectorTable30 (ID: 30)
	1	3.200000
	2	33.623000
	3	17.230000
	4	5.750000
	5	2.900000
Printing Complex Vector: VectorView31 (ID: 31)
	1	76.123450	321.234000
	2	NA	NA
	3	NA	NA
	4	645.346000	-12.435000
	5	645.346000	0.000000
Getting Complex elems using logic vector VectorTable32 (1,0,0,1,1)
Printing Complex Vector: VectorView34 (ID: 34)
	1	123.430000	-12.435000
	2	123.430000	12.000000
	3	645.346000	-12.435000
	4	76.123450	0.000000
	5	0.231400	4.000023
	6	-23.976000	95.000000
	7	13.754000	-3.567800
	8	0.000000	24.000000
	9	25.440000	4.560000
----------------------------------------
Logic Table:	35	VectorTable35
Printing All Logic: VectorTable35 (ID: 35)
	1	TRUE
	2	FALSE
	3	FALSE
	4	TRUE
	5	TRUE
	6	TRUE
	7	FALSE
From logic table got elem 3: FALSE
	Loaded into Logic's table
Printing All Logic: VectorTable35 (ID: 35)
	1	TRUE
	2	FALSE
	3	FALSE
	4	TRUE
	5	TRUE
	6	TRUE
	7	FALSE
	8	TRUE
	9	FALSE
	10	FALSE
	11	TRUE
	12	TRUE
	13	FALSE
Getting Range of Logic (5,9):
	5	TRUE
	6	TRUE
	7	FALSE
	8	TRUE
	9	FALSE
Getting Sparse Logic
	3	FALSE
	30	NA
	12	TRUE
	6	TRUE
Getting Logic with indexes from VectorTable36
Printing All Integer: VectorTable36 (ID: 36)
	1	3
	2	30
	3	12
	4	6
	5	3
Printing All Logic: VectorView37 (ID: 37)
	1	FALSE
	2	NA
	3	TRUE
	4	TRUE
	5	FALSE
Getting Logic with indexes from VectorTable38
Printing Double Vector: VectorTable38 (ID: 38)
	1	3.200000
	2	33.623000
	3	17.230000
	4	5.750000
	5	2.900000
Printing All Logic: VectorView39 (ID: 39)
	1	FALSE
	2	NA
	3	NA
	4	TRUE
	5	FALSE
Getting Logic elems using logic vector VectorTable40 (1,0,0,1,1)
Printing All Logic: VectorView42 (ID: 42)
	1	TRUE
	2	TRUE
	3	TRUE
	4	TRUE
	5	FALSE
	6	FALSE
	7	TRUE
----------------------------------------
Integer Table:	43	VectorTable43
Printing All Integer: VectorTable43 (ID: 43)
	1	234
	2	3454
	3	-7546
	4	32
	5	43
	6	435
	7	-6434
	8	0
	9	7676
	10	-5
	11	9
	12	-566
	13	45
	14	6
	15	2
Logic Size: 15	 Actual Size: 15	Has NA: 0
Setting Integer Elements (5, 122) & (19, 222)
Printing All Integer: VectorTable43 (ID: 43)
	1	234
	2	3454
	3	-7546
	4	32
	5	122
	6	435
	7	-6434
	8	0
	9	7676
	10	-5
	11	9
	12	-566
	13	45
	14	6
	15	2
	16	NA
	17	NA
	18	NA
	19	222
Logic Size: 19	 Actual Size: 16	Has NA: 1
Checking for NA in VectorTable43
Printing All Logic: VectorTable44 (ID: 44)
	1	FALSE
	2	FALSE
	3	FALSE
	4	FALSE
	5	FALSE
	6	FALSE
	7	FALSE
	8	FALSE
	9	FALSE
	10	FALSE
	11	FALSE
	12	FALSE
	13	FALSE
	14	FALSE
	15	FALSE
	16	TRUE
	17	TRUE
	18	TRUE
	19	FALSE
Setting Integer Elements in range (8, 17)
Printing All Integer: VectorTable43 (ID: 43)
	1	234
	2	3454
	3	-7546
	4	32
	5	122
	6	435
	7	-6434
	8	11
	9	22
	10	33
	11	11
	12	22
	13	33
	14	11
	15	22
	16	33
	17	11
	18	NA
	19	222
Setting Integer Elements with indexes (8, 3, 25, 22, 12)
Printing All Integer: VectorTable43 (ID: 43)
	1	234
	2	3454
	3	200
	4	32
	5	122
	6	435
	7	-6434
	8	100
	9	22
	10	33
	11	11
	12	200
	13	33
	14	11
	15	22
	16	33
	17	11
	18	NA
	19	222
	20	NA
	21	NA
	22	100
	23	NA
	24	NA
	25	300
Setting Integer Elements with indexes from DBVector
Printing Double Vector: VectorTable45 (ID: 45)
	1	6.000000
	2	3.200000
	3	18.900000
	4	1.532000
	5	2.670000
	6	NA
	7	NA
	8	8.880000
Printing All Integer: VectorTable43 (ID: 43)
	1	100
	2	200
	3	200
	4	32
	5	122
	6	100
	7	-6434
	8	300
	9	22
	10	33
	11	11
	12	200
	13	33
	14	11
	15	22
	16	33
	17	11
	18	300
	19	222
	20	NA
	21	NA
	22	100
	23	NA
	24	NA
	25	300
Setting Integer Elements with indexes from Logic
Printing All Logic: VectorTable46 (ID: 46)
	1	TRUE
	2	FALSE
	3	FALSE
Printing All Integer: VectorTable43 (ID: 43)
	1	1111
	2	200
	3	200
	4	2222
	5	122
	6	100
	7	1111
	8	300
	9	22
	10	2222
	11	11
	12	200
	13	1111
	14	11
	15	22
	16	2222
	17	11
	18	300
	19	1111
	20	NA
	21	NA
	22	2222
	23	NA
	24	NA
	25	1111
----------------------------------------
Double Table:	47	VectorTable47
Printing Double Vector: VectorTable47 (ID: 47)
	1	321.345000
	2	0.234556
	3	-123.568000
	4	234.000000
	5	0.000000
	6	435.000010
	7	234.645779
	8	-0.000120
	9	34.524530
	10	2353.540000
	11	22.340000
Setting Double Elements (5, 122.99) & (12, 222.001)
Printing Double Vector: VectorTable47 (ID: 47)
	1	321.345000
	2	0.234556
	3	-123.568000
	4	234.000000
	5	122.990000
	6	435.000010
	7	234.645779
	8	-0.000120
	9	34.524530
	10	2353.540000
	11	22.340000
	12	222.001000
Checking for NA in VectorTable47
Printing All Logic: VectorTable48 (ID: 48)
	1	FALSE
	2	FALSE
	3	FALSE
	4	FALSE
	5	FALSE
	6	FALSE
	7	FALSE
	8	FALSE
	9	FALSE
	10	FALSE
	11	FALSE
	12	FALSE
Setting Double Elements in range (4, 8)
Printing Double Vector: VectorTable47 (ID: 47)
	1	321.345000
	2	0.234556
	3	-123.568000
	4	11.100000
	5	22.200000
	6	33.300000
	7	11.100000
	8	22.200000
	9	34.524530
	10	2353.540000
	11	22.340000
	12	222.001000
Setting Double Elements with indexes (8, 3, 15, 12, 2)
Printing Double Vector: VectorTable47 (ID: 47)
	1	321.345000
	2	200.000000
	3	200.000000
	4	11.100000
	5	22.200000
	6	33.300000
	7	11.100000
	8	100.000000
	9	34.524530
	10	2353.540000
	11	22.340000
	12	100.000000
	13	NA
	14	NA
	15	300.000000
Setting DOuble Elements with indexes from DBVector
Printing Double Vector: VectorTable49 (ID: 49)
	1	6.000000
	2	3.200000
	3	18.900000
	4	1.532000
	5	2.670000
	6	NA
	7	NA
	8	8.880000
Printing Double Vector: VectorTable47 (ID: 47)
	1	22222.222000
	2	111111.111000
	3	22222.222000
	4	11.100000
	5	22.200000
	6	111111.111000
	7	11.100000
	8	22222.222000
	9	34.524530
	10	2353.540000
	11	22.340000
	12	100.000000
	13	NA
	14	NA
	15	300.000000
	16	NA
	17	NA
	18	111111.111000
Setting Double Elements with indexes from Logic
Printing All Logic: VectorTable50 (ID: 50)
	1	TRUE
	2	FALSE
	3	FALSE
Printing Double Vector: VectorTable47 (ID: 47)
	1	0.000010
	2	111111.111000
	3	22222.222000
	4	0.000020
	5	22.200000
	6	111111.111000
	7	0.000010
	8	22222.222000
	9	34.524530
	10	0.000020
	11	22.340000
	12	100.000000
	13	0.000010
	14	NA
	15	300.000000
	16	0.000020
	17	NA
	18	111111.111000
----------------------------------------
String Table:	51	VectorTable51
Printing String Vector: VectorTable51 (ID: 51)
	1	George Mason
	2	Yes, hello!
	3	Maybe!@#
	4	Yeap123
	5	no no  , yes yes?
	6	{}[]()
	7	Symbols: !@#$%^&*
Setting String Elements (2, 'into2') & (9, 'into6!')
Printing String Vector: VectorTable51 (ID: 51)
	1	George Mason
	2	into2
	3	Maybe!@#
	4	Yeap123
	5	no no  , yes yes?
	6	{}[]()
	7	Symbols: !@#$%^&*
	8	NA
	9	into6!
Checking for NA in VectorTable51
Printing All Logic: VectorTable52 (ID: 52)
	1	FALSE
	2	FALSE
	3	FALSE
	4	FALSE
	5	FALSE
	6	FALSE
	7	FALSE
	8	TRUE
	9	FALSE
Setting String Elements in range (3, 4)
Printing String Vector: VectorTable51 (ID: 51)
	1	George Mason
	2	into2
	3	AAA
	4	BBBB
	5	no no  , yes yes?
	6	{}[]()
	7	Symbols: !@#$%^&*
	8	NA
	9	into6!
Setting String Elements with indexes (8, 3, 12, 10, 2)
Printing String Vector: VectorTable51 (ID: 51)
	1	George Mason
	2	LL
	3	LL
	4	BBBB
	5	no no  , yes yes?
	6	{}[]()
	7	Symbols: !@#$%^&*
	8	KKK
	9	into6!
	10	KKK
	11	NA
	12	M
----------------------------------------
Complex Table:	53	VectorTable53
Printing Complex Vector: VectorTable53 (ID: 53)
	1	23.123000	12.423400
	2	0.231400	4.000023
	3	-23.976000	95.000000
	4	13.754000	-3.567800
	5	-43.088000	-0.000100
	6	23.000000	34.312400
	7	0.000000	24.000000
	8	25.440000	4.560000
Setting Complex Elements (1, 12.12, 44.5) & (10, 1.234, 9.876)
Printing Complex Vector: VectorTable53 (ID: 53)
	1	12.120000	44.500000
	2	0.231400	4.000023
	3	-23.976000	95.000000
	4	13.754000	-3.567800
	5	-43.088000	-0.000100
	6	23.000000	34.312400
	7	0.000000	24.000000
	8	25.440000	4.560000
	9	NA	NA
	10	1.234000	9.876000
Checking for NA in VectorTable53
Printing All Logic: VectorTable54 (ID: 54)
	1	FALSE
	2	FALSE
	3	FALSE
	4	FALSE
	5	FALSE
	6	FALSE
	7	FALSE
	8	FALSE
	9	TRUE
	10	FALSE
Setting Complex Elements in range (5, 7)
Printing Complex Vector: VectorTable53 (ID: 53)
	1	12.120000	44.500000
	2	0.231400	4.000023
	3	-23.976000	95.000000
	4	13.754000	-3.567800
	5	1.000000	2.000000
	6	3.000000	4.000000
	7	5.000000	6.000000
	8	25.440000	4.560000
	9	NA	NA
	10	1.234000	9.876000
Setting Complex Elements with indexes (8, 3, 15, 12, 2)
Printing Complex Vector: VectorTable53 (ID: 53)
	1	12.120000	44.500000
	2	30.000000	40.000000
	3	30.000000	40.000000
	4	13.754000	-3.567800
	5	1.000000	2.000000
	6	3.000000	4.000000
	7	5.000000	6.000000
	8	10.000000	20.000000
	9	NA	NA
	10	1.234000	9.876000
	11	NA	NA
	12	10.000000	20.000000
	13	NA	NA
	14	NA	NA
	15	50.000000	60.000000
----------------------------------------
Logic Table:	55	VectorTable55
Printing All Logic: VectorTable55 (ID: 55)
	1	TRUE
	2	FALSE
	3	FALSE
	4	TRUE
	5	TRUE
	6	FALSE
Setting Logic Elements (3, TRUE) & (5, FALSE)
Printing All Logic: VectorTable55 (ID: 55)
	1	TRUE
	2	FALSE
	3	TRUE
	4	TRUE
	5	FALSE
	6	FALSE
Checking for NA in VectorTable55
Printing All Logic: VectorTable56 (ID: 56)
	1	FALSE
	2	FALSE
	3	FALSE
	4	FALSE
	5	FALSE
	6	FALSE
Setting Logic Elements in range (5, 8) - {1,0,1}
Printing All Logic: VectorTable55 (ID: 55)
	1	TRUE
	2	FALSE
	3	TRUE
	4	TRUE
	5	TRUE
	6	FALSE
	7	TRUE
	8	TRUE
Setting Logic Elements with indexes (8, 3, 12, 4, 6) - {1,0,1}
Printing All Logic: VectorTable55 (ID: 55)
	1	TRUE
	2	FALSE
	3	FALSE
	4	TRUE
	5	TRUE
	6	FALSE
	7	TRUE
	8	TRUE
	9	NA
	10	NA
	11	NA
	12	TRUE
----------------------------------------
Integer Seq Table:	57	VectorTable57
Printing All Integer: VectorTable57 (ID: 57)
	1	-10
	2	-8
	3	-6
	4	-4
	5	-2
	6	0
	7	2
	8	4
	9	6
	10	8
	11	10
	12	12
----------------------------------------
Double Seq Table:	58	VectorTable58
Printing Double Vector: VectorTable58 (ID: 58)
	1	0.340000
	2	0.290000
	3	0.240000
	4	0.190000
	5	0.140000
	6	0.090000
	7	0.040000
	8	-0.010000
	9	-0.060000
	10	-0.110000
----------------------------------------
Testing Add for Integers:
Printing All Integer: VectorView61 (ID: 61)
	1	6
	2	-3
	3	12
	4	1
	5	24
	6	-9
	7	12
	8	27
Testing Minus for Integers:
Printing All Integer: VectorView62 (ID: 62)
	1	-2
	2	-3
	3	2
	4	17
	5	4
	6	13
	7	-18
	8	-13
Testing Mult for Integers:
Printing All Integer: VectorView63 (ID: 63)
	1	8
	2	0
	3	35
	4	-72
	5	140
	6	-22
	7	-45
	8	140
Testing Division for Integers:
Printing Double Vector: VectorView64 (ID: 64)
	1	0.500000
	2	NA
	3	1.400000
	4	-1.125000
	5	1.400000
	6	-0.181800
	7	-0.200000
	8	0.350000
Testing Mod for Integers:
Printing All Integer: VectorView65 (ID: 65)
	1	2
	2	NA
	3	2
	4	1
	5	4
	6	2
	7	-3
	8	7
----------------------------------------
Testing Add for Doubles:
Printing Double Vector: VectorView68 (ID: 68)
	1	6.500000
	2	9.200000
	3	12.400000
	4	17.100000
	5	24.000000
	6	13.500000
	7	18.200000
	8	27.400000
Testing Minus for Doubles:
Printing Double Vector: VectorView69 (ID: 69)
	1	-1.500000
	2	-2.800000
	3	2.400000
	4	1.100000
	5	4.000000
	6	-8.500000
	7	-11.800000
	8	-12.600000
Testing Mult for Doubles:
Printing Double Vector: VectorView70 (ID: 70)
	1	10.000000
	2	19.200000
	3	37.000000
	4	72.800000
	5	140.000000
	6	27.500000
	7	48.000000
	8	148.000000
Testing Div for Doubles:
Printing Double Vector: VectorView71 (ID: 71)
	1	0.625000
	2	0.533333
	3	1.480000
	4	1.137500
	5	1.400000
	6	0.227273
	7	0.213333
	8	0.370000
----------------------------------------
Printing Complex Vector: VectorTable72 (ID: 72)
	1	2.500000	2.500000
	2	3.200000	8.200000
	3	7.400000	-7.400000
	4	9.100000	1.100000
	5	14.000000	7.000000
Printing Complex Vector: VectorTable73 (ID: 73)
	1	23.123000	12.423400
	2	0.231400	4.000023
	3	-23.976000	95.000000
	4	13.754000	-3.567800
	5	-43.088000	-0.000100
	6	23.000000	34.312400
	7	0.000000	24.000000
	8	25.440000	4.560000
Printing All Integer: VectorTable74 (ID: 74)
	1	234
	2	3454
	3	-7546
	4	32
	5	43
	6	435
	7	-6434
	8	0
	9	7676
	10	-5
	11	9
	12	-566
	13	45
	14	6
	15	2
Printing Double Vector: VectorTable75 (ID: 75)
	1	321.345000
	2	0.234556
	3	-123.568000
	4	234.000000
	5	0.000000
	6	435.000010
	7	234.645779
	8	-0.000120
	9	34.524530
	10	2353.540000
	11	22.340000
Testing Add for Complex:
Printing Complex Vector: VectorView76 (ID: 76)
	1	25.623000	14.923400
	2	3.431400	12.200023
	3	-16.576000	87.600000
	4	22.854000	-2.467800
	5	-29.088000	6.999900
	6	25.500000	36.812400
	7	3.200000	32.200000
	8	32.840000	-2.840000
Testing Minus for Complex:
Printing Complex Vector: VectorView78 (ID: 78)
	1	-231.500000	2.500000
	2	-3450.800000	8.200000
	3	7553.400000	-7.400000
	4	-22.900000	1.100000
	5	-29.000000	7.000000
	6	-432.500000	2.500000
	7	6437.200000	8.200000
	8	7.400000	-7.400000
	9	-7666.900000	1.100000
	10	19.000000	7.000000
	11	-6.500000	2.500000
	12	569.200000	8.200000
	13	-37.600000	-7.400000
	14	3.100000	1.100000
	15	12.000000	7.000000
Testing Mult for Complex:
Printing Complex Vector: VectorView80 (ID: 80)
	1	7430.460435	3992.197473
	2	0.054276	0.938229
	3	2962.666368	-11738.960000
	4	3218.436000	-834.865200
	5	0.000000	-0.000000
	6	10005.000230	14925.894343
	7	0.000000	5631.498694
	8	-0.003053	-0.000547
	9	798.310707	428.912046
	10	544.609156	9414.214131
	11	-535.623840	2122.300000
Testing Div for Complex:
Printing Complex Vector: VectorView81 (ID: 81)
	1	0.128976	0.038822
	2	2.089276	-0.679131
	3	-0.091712	-0.054749
	4	0.600474	0.235740
	5	-0.324917	-0.162457
	6	0.083970	-0.016574
	7	0.341667	-0.133333
	8	0.231310	-0.332342
----------------------------------------
Testing Add for Logic/Integers:
Printing All Integer: VectorView86 (ID: 86)
	1	5
	2	6
	3	5
	4	-7
	5	10
	6	-10
	7	15
	8	20
Testing Minus for Logic/Integers:
Printing All Integer: VectorView87 (ID: 87)
	1	-3
	2	-6
	3	-5
	4	9
	5	-10
	6	12
	7	-15
	8	-20
Testing Mult for Logic/Complex:
Printing Complex Vector: VectorView89 (ID: 89)
	1	43.230000	3.120000
	2	0.000000	0.000000
	3	-0.000000	0.000000
	4	321.000000	12.300000
	5	0.000000	0.000000
Testing Division for Logic/Doubles:
Printing Double Vector: VectorView90 (ID: 90)
	1	0.081766
	2	0.000000
	3	-0.000000
	4	0.081766
	5	0.000000
----------------------------------------
Testing Materialization of references table
Printing All Integer: VectorTable91 (ID: 91)
	1	2
	2	-3
	3	7
	4	9
	5	14
Printing All Integer: VectorTable92 (ID: 92)
	1	4
	2	6
	3	5
	4	-8
	5	10
	6	-11
	7	15
	8	20
Printing All Integer: VectorView95 (ID: 95)
	1	6
	2	3
	3	12
	4	1
	5	24
	6	-9
	7	12
	8	27
Modify input1: VectorTable91
Printing All Integer: VectorTable91 (ID: 91)
	1	2
	2	-3
	3	7
	4	9
	5	14
	6	NA
	7	777
Printing All Integer: VectorTable92 (ID: 92)
	1	4
	2	6
	3	5
	4	-8
	5	10
	6	-11
	7	15
	8	20
Printing All Integer: VectorView95 (ID: 95)
	1	6
	2	3
	3	12
	4	1
	5	24
	6	-9
	7	12
	8	27
----------------------------------------
Testing Materialization of view
Printing All Integer: VectorTable91 (ID: 91)
	1	2
	2	-3
	3	7
	4	9
	5	14
	6	NA
	7	777
Printing All Integer: VectorTable92 (ID: 92)
	1	4
	2	6
	3	5
	4	-8
	5	10
	6	-11
	7	15
	8	20
Printing All Integer: VectorView97 (ID: 97)
	1	-2
	2	-9
	3	2
	4	17
	5	4
	6	NA
	7	762
	8	-18
Modify result: VectorView97
Printing All Integer: VectorTable91 (ID: 91)
	1	2
	2	-3
	3	7
	4	9
	5	14
	6	NA
	7	777
Printing All Integer: VectorTable92 (ID: 92)
	1	4
	2	6
	3	5
	4	-8
	5	10
	6	-11
	7	15
	8	20
Printing All Integer: VectorView97 (ID: 97)
	1	-2
	2	-9
	3	2
	4	17
	5	4
	6	NA
	7	11
	8	22
	9	33
	10	11
----------------------------------------
Testing Materialization of modifying double in complex op
Printing Complex Vector: VectorTable93 (ID: 93)
	1	23.123000	12.423400
	2	0.231400	4.000023
	3	-23.976000	95.000000
	4	13.754000	-3.567800
	5	-43.088000	-0.000100
	6	23.000000	34.312400
	7	0.000000	24.000000
	8	25.440000	4.560000
Printing Double Vector: VectorTable94 (ID: 94)
	1	321.345000
	2	0.234556
	3	-123.568000
	4	234.000000
	5	0.000000
	6	435.000010
	7	234.645779
	8	-0.000120
	9	34.524530
	10	2353.540000
	11	22.340000
Printing Complex Vector: VectorView100 (ID: 100)
	1	7430.460435	3992.197473
	2	0.054276	0.938229
	3	2962.666368	-11738.960000
	4	3218.436000	-834.865200
	5	0.000000	-0.000000
	6	10005.000230	14925.894343
	7	0.000000	5631.498694
	8	-0.003053	-0.000547
	9	798.310707	428.912046
	10	544.609156	9414.214131
	11	-535.623840	2122.300000
Modify inputDoubles: VectorTable94
Printing Complex Vector: VectorTable93 (ID: 93)
	1	23.123000	12.423400
	2	0.231400	4.000023
	3	-23.976000	95.000000
	4	13.754000	-3.567800
	5	-43.088000	-0.000100
	6	23.000000	34.312400
	7	0.000000	24.000000
	8	25.440000	4.560000
Printing Double Vector: VectorTable94 (ID: 94)
	1	321.345000
	2	0.234556
	3	-123.568000
	4	44.444000
	5	0.000000
	6	435.000010
	7	234.645779
	8	-0.000120
	9	34.524530
	10	2353.540000
	11	22.340000
Printing Complex Vector: VectorView100 (ID: 100)
	1	7430.460435	3992.197473
	2	0.054276	0.938229
	3	2962.666368	-11738.960000
	4	3218.436000	-834.865200
	5	0.000000	-0.000000
	6	10005.000230	14925.894343
	7	0.000000	5631.498694
	8	-0.003053	-0.000547
	9	798.310707	428.912046
	10	544.609156	9414.214131
	11	-535.623840	2122.300000
----------------------------------------
Testing Materialization of complex view
Printing Complex Vector: VectorTable93 (ID: 93)
	1	23.123000	12.423400
	2	0.231400	4.000023
	3	-23.976000	95.000000
	4	13.754000	-3.567800
	5	-43.088000	-0.000100
	6	23.000000	34.312400
	7	0.000000	24.000000
	8	25.440000	4.560000
Printing Double Vector: VectorTable94 (ID: 94)
	1	321.345000
	2	0.234556
	3	-123.568000
	4	44.444000
	5	0.000000
	6	435.000010
	7	234.645779
	8	-0.000120
	9	34.524530
	10	2353.540000
	11	22.340000
Printing Complex Vector: VectorView103 (ID: 103)
	1	7430.460435	3992.197473
	2	0.054276	0.938229
	3	2962.666368	-11738.960000
	4	611.282776	-158.567303
	5	0.000000	-0.000000
	6	10005.000230	14925.894343
	7	0.000000	5631.498694
	8	-0.003053	-0.000547
	9	798.310707	428.912046
	10	544.609156	9414.214131
	11	-535.623840	2122.300000
Modify complex view: VectorView103
Printing Complex Vector: VectorTable93 (ID: 93)
	1	23.123000	12.423400
	2	0.231400	4.000023
	3	-23.976000	95.000000
	4	13.754000	-3.567800
	5	-43.088000	-0.000100
	6	23.000000	34.312400
	7	0.000000	24.000000
	8	25.440000	4.560000
Printing Double Vector: VectorTable94 (ID: 94)
	1	321.345000
	2	0.234556
	3	-123.568000
	4	44.444000
	5	0.000000
	6	435.000010
	7	234.645779
	8	-0.000120
	9	34.524530
	10	2353.540000
	11	22.340000
Printing Complex Vector: VectorView103 (ID: 103)
	1	7430.460435	3992.197473
	2	0.054276	0.938229
	3	2962.666368	-11738.960000
	4	611.282776	-158.567303
	5	55.550000	5.555000
	6	10005.000230	14925.894343
	7	0.000000	5631.498694
	8	-0.003053	-0.000547
	9	798.310707	428.912046
	10	544.609156	9414.214131
	11	-535.623840	2122.300000
----------------------------------------
----------------------------------------
Testing Dublication of double table
Printing Double Vector: VectorTable106 (ID: 106)
	1	321.345000
	2	0.234556
	3	-123.568000
	4	234.000000
	5	0.000000
	6	435.000010
	7	234.645779
	8	-0.000120
	9	34.524530
	10	2353.540000
	11	22.340000
Printing Double Vector: VectorTable108 (ID: 108)
	1	321.345000
	2	0.234556
	3	-123.568000
	4	234.000000
	5	0.000000
	6	435.000010
	7	234.645779
	8	-0.000120
	9	34.524530
	10	2353.540000
	11	22.340000
Testing Dublication of view
Printing Complex Vector: VectorView110 (ID: 110)
	1	25.123000	12.423400
	2	-2.768600	4.000023
	3	-16.976000	95.000000
	4	22.754000	-3.567800
	5	-29.088000	-0.000100
	6	25.000000	34.312400
	7	-3.000000	24.000000
	8	32.440000	4.560000
Printing Complex Vector: VectorTable111 (ID: 111)
	1	25.123000	12.423400
	2	-2.768600	4.000023
	3	-16.976000	95.000000
	4	22.754000	-3.567800
	5	-29.088000	-0.000100
	6	25.000000	34.312400
	7	-3.000000	24.000000
	8	32.440000	4.560000
----------------------------------------
Testing Comparison of Integer Values (>)
Printing All Integer: VectorTable112 (ID: 112)
	1	10
	2	20
	3	30
	4	8
	5	18
	6	NA
	7	NA
	8	NA
	9	6
Comparison: > {12, 16, 10}
Printing All Logic: VectorView113 (ID: 113)
	1	FALSE
	2	TRUE
	3	TRUE
	4	FALSE
	5	TRUE
	6	NA
	7	NA
	8	NA
	9	FALSE
Testing Comparison of Double Values (<=)
Printing Double Vector: VectorTable114 (ID: 114)
	1	10.000000
	2	20.000000
	3	30.000000
	4	8.000000
	5	18.000000
	6	NA
	7	NA
	8	NA
	9	6.000000
Comparison: <= {12.0, 16.0, 10.0}
Printing All Logic: VectorView115 (ID: 115)
	1	TRUE
	2	FALSE
	3	FALSE
	4	TRUE
	5	FALSE
	6	NA
	7	NA
	8	NA
	9	TRUE
Testing Comparison of String Values (=)
Printing String Vector: VectorTable116 (ID: 116)
	1	George Mason
	2	Yes, hello!
	3	Maybe!@#
	4	Yeap123
	5	no no  , yes yes?
	6	{}[]()
	7	Symbols: !@#$%^&*
Comparison: = {"Yeap123", "zzz", "{}[]()"};
Printing All Logic: VectorView117 (ID: 117)
	1	FALSE
	2	FALSE
	3	FALSE
	4	FALSE
	5	FALSE
	6	FALSE
	7	FALSE
Testing Comparison with DBVector (!=)
Printing All Integer: VectorTable118 (ID: 118)
	1	10
	2	20
	3	30
	4	8
	5	18
	6	NA
	7	NA
	8	NA
	9	6
Printing All Integer: VectorTable119 (ID: 119)
	1	8
	2	20
	3	10
Printing All Logic: VectorView120 (ID: 120)
	1	TRUE
	2	FALSE
	3	TRUE
	4	FALSE
	5	TRUE
	6	NA
	7	NA
	8	NA
	9	TRUE
Testing Functions for Integer Table VectorTable121
Printing All Integer: VectorTable121 (ID: 121)
	1	234
	2	3454
	3	-7546
	4	32
	5	43
	6	435
	7	-6434
	8	0
	9	7676
	10	-5
	11	9
	12	-566
	13	45
	14	6
	15	2
Functions:
	SUM: -2615
	AVG: -174.333300
	MAX: 7676
	MIN: -7546
Testing Sin/Cos for Integer Table VectorTable121
Printing Double Vector: VectorView122 (ID: 122)
	1	0.998817
	2	-0.983642
	3	0.105358
	4	0.551427
	5	-0.831775
	6	0.993892
	7	-0.018244
	8	0.000000
	9	-0.886232
	10	0.958924
	11	0.412118
	12	-0.491074
	13	0.850904
	14	-0.279415
	15	0.909297
Printing Double Vector: VectorView123 (ID: 123)
	1	0.048634
	2	-0.180134
	3	0.994434
	4	0.834223
	5	0.555113
	6	0.110357
	7	0.999834
	8	1.000000
	9	-0.463241
	10	0.283662
	11	-0.911130
	12	0.871118
	13	0.525322
	14	0.960170
	15	-0.416147
Testing Functions for Double Table VectorTable124
Printing Double Vector: VectorTable124 (ID: 124)
	1	321.345000
	2	0.234556
	3	-123.568000
	4	234.000000
	5	0.000000
	6	435.000010
	7	234.645779
	8	-0.000120
	9	34.524530
	10	2353.540000
	11	22.340000
Functions:
	SUM: 3512.061755
	AVG: 319.278341
	MAX: 2353.540000
	MIN: -123.568000
Testing Sin/Cos for Double Table VectorTable124
Printing Double Vector: VectorView125 (ID: 125)
	1	0.784909
	2	0.232411
	3	0.865369
	4	0.998817
	5	0.000000
	6	0.993893
	7	0.826955
	8	-0.000120
	9	0.032983
	10	-0.468067
	11	-0.341819
Printing Double Vector: VectorView126 (ID: 126)
	1	0.619611
	2	0.972618
	3	-0.501135
	4	0.048634
	5	1.000000
	6	0.110347
	7	-0.562268
	8	1.000000
	9	-0.999456
	10	-0.883693
	11	-0.939766
Testing Functions for String Table VectorTable127
Printing String Vector: VectorTable127 (ID: 127)
	1	George Mason
	2	Yes, hello!
	3	Maybe!@#
	4	Yeap123
	5	no no  , yes yes?
	6	{}[]()
	7	Symbols: !@#$%^&*
Functions:
	MAX: {}[]()
	MIN: George Mason
Testing Functions for Complex Table VectorTable128
Printing Complex Vector: VectorTable128 (ID: 128)
	1	23.123000	12.423400
	2	0.231400	4.000023
	3	-23.976000	95.000000
	4	13.754000	-3.567800
	5	-43.088000	-0.000100
	6	23.000000	34.312400
	7	0.000000	24.000000
	8	25.440000	4.560000
Functions:
	SUM: 18.484400	 170.727923
	AVG: 2.310550	 21.340990
Testing Sin/Cos for Complex Table VectorTable128
Printing Complex Vector: VectorView129 (ID: 129)
	1	-112493.877971	-52815.000809
	2	6.263026	26.563151
	3	82909187086537000507035360271469167771648.000000	36435343213854000315109613394849433649152.000000
	4	16.447449	-6.619245
	5	0.779769	-0.000063
	6	-337395649296460.000000	-212445294364190.000000
	7	0.000000	13244561064.922001
	8	14.456047	45.548486
Printing Complex Vector: VectorView130 (ID: 130)
	1	-52815.000811	112493.877967
	2	26.580978	-6.258825
	3	36435343213854000315109613394849433649152.000000	-82909187086537000507035360271469167771648.000000
	4	6.629795	16.421278
	5	0.626067	0.000078
	6	-212445294364190.000000	337395649296460.000000
	7	13244561064.922001	-0.000000
	8	45.558458	-14.452883
Printing All Integer: VectorTable131 (ID: 131)
	1	234
	2	3454
	3	-7546
	4	32
	5	43
	6	435
	7	-6434
	8	0
	9	7676
	10	-5
	11	9
	12	-566
	13	45
	14	6
	15	2
Printing Double Vector: VectorView136 (ID: 136)
	1	234.000000
	2	3454.000000
	3	-7546.000000
	4	32.000000
	5	43.000000
	6	435.000000
	7	-6434.000000
	8	0.000000
	9	7676.000000
	10	-5.000000
	11	9.000000
	12	-566.000000
	13	45.000000
	14	6.000000
	15	2.000000
Printing Double Vector: VectorTable132 (ID: 132)
	1	321.345000
	2	0.234556
	3	-123.568000
	4	234.000000
	5	0.000000
	6	435.000010
	7	234.645779
	8	-0.000120
	9	34.524530
	10	2353.540000
	11	22.340000
Printing All Integer: VectorView134 (ID: 134)
	1	321
	2	0
	3	-124
	4	234
	5	0
	6	435
	7	234
	8	-1
	9	34
	10	2353
	11	22
Printing All Logic: VectorTable133 (ID: 133)
	1	TRUE
	2	FALSE
	3	FALSE
	4	TRUE
	5	TRUE
	6	FALSE
Printing All Integer: VectorView135 (ID: 135)
	1	1
	2	0
	3	0
	4	1
	5	1
	6	0
Printing Double Vector: VectorView137 (ID: 137)
	1	1.000000
	2	0.000000
	3	0.000000
	4	1.000000
	5	1.000000
	6	0.000000

Number of tables: 131
	1	VectorTable1
	2	VectorTable2
	3	VectorView3
	4	VectorTable4
	5	VectorView5
	8	VectorTable8
	9	VectorView9
	10	VectorView10
	11	VectorTable11
	12	VectorTable12
	13	VectorView13
	14	VectorTable14
	15	VectorView15
	16	VectorTable16
	17	VectorView17
	18	VectorView18
	19	VectorTable19
	20	VectorTable20
	21	VectorView21
	22	VectorTable22
	23	VectorView23
	24	VectorTable24
	25	VectorView25
	26	VectorView26
	27	VectorTable27
	28	VectorTable28
	29	VectorView29
	30	VectorTable30
	31	VectorView31
	32	VectorTable32
	33	VectorView33
	34	VectorView34
	35	VectorTable35
	36	VectorTable36
	37	VectorView37
	38	VectorTable38
	39	VectorView39
	40	VectorTable40
	41	VectorView41
	42	VectorView42
	43	VectorTable43
	44	VectorTable44
	45	VectorTable45
	46	VectorTable46
	47	VectorTable47
	48	VectorTable48
	49	VectorTable49
	50	VectorTable50
	51	VectorTable51
	52	VectorTable52
	53	VectorTable53
	54	VectorTable54
	55	VectorTable55
	56	VectorTable56
	57	VectorTable57
	58	VectorTable58
	59	VectorTable59
	60	VectorTable60
	61	VectorView61
	62	VectorView62
	63	VectorView63
	64	VectorView64
	65	VectorView65
	66	VectorTable66
	67	VectorTable67
	68	VectorView68
	69	VectorView69
	70	VectorView70
	71	VectorView71
	72	VectorTable72
	73	VectorTable73
	74	VectorTable74
	75	VectorTable75
	76	VectorView76
	77	VectorView77
	78	VectorView78
	79	VectorView79
	80	VectorView80
	81	VectorView81
	82	VectorTable82
	83	VectorTable83
	84	VectorTable84
	85	VectorTable85
	86	VectorView86
	87	VectorView87
	88	VectorView88
	89	VectorView89
	90	VectorView90
	91	VectorTable91
	92	VectorTable92
	93	VectorTable93
	94	VectorTable94
	95	VectorView95
	97	VectorView97
	99	VectorView99
	100	VectorView100
	102	VectorView102
	103	VectorView103
	105	VectorTable105
	106	VectorTable106
	107	VectorTable107
	108	VectorTable108
	109	VectorView109
	110	VectorView110
	111	VectorTable111
	112	VectorTable112
	113	VectorView113
	114	VectorTable114
	115	VectorView115
	116	VectorTable116
	117	VectorView117
	118	VectorTable118
	119	VectorTable119
	120	VectorView120
	121	VectorTable121
	122	VectorView122
	123	VectorView123
	124	VectorTable124
	125	VectorView125
	126	VectorView126
	127	VectorTable127
	128	VectorTable128
	129	VectorView129
	130	VectorView130
	131	VectorTable131
	132	VectorTable132
	133	VectorTable133
	134	VectorView134
	135	VectorView135
	136	VectorView136
	137	VectorView137
----------------------------------------
Completed Execution!
